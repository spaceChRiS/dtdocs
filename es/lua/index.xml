<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Scripting with Lua on darktable 3.8 user manual</title>
    <link>https://darktable-org.github.io/dtdocs/es/lua/</link>
    <description>Recent content in Scripting with Lua on darktable 3.8 user manual</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://darktable-org.github.io/dtdocs/es/lua/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Resumen</title>
      <link>https://darktable-org.github.io/dtdocs/es/lua/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darktable-org.github.io/dtdocs/es/lua/overview/</guid>
      <description>Los scripts de Lua se pueden usar para definir acciones para que darktable realice cuando se desencadena un evento. Un ejemplo podría ser llamar a una aplicación externa durante la exportación de archivos para aplicar pasos de procesamiento adicionales fuera de darktable.
Lua es un proyecto independiente fundado en 1993, que proporciona un lenguaje de scripting potente, rápido, ligero e integrable. Lua es ampliamente utilizado por muchas aplicaciones de código abierto, en programas comerciales y para la programación de juegos.</description>
    </item>
    
    <item>
      <title>principios básicos: archivos luarc</title>
      <link>https://darktable-org.github.io/dtdocs/es/lua/basic-principles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darktable-org.github.io/dtdocs/es/lua/basic-principles/</guid>
      <description>Al inicio, darktable ejecutará automáticamente los scripts de Lua que se encuentren en $DARKTABLE/share/darktable/luarc y$HOME/.config/darktable/luarc (donde $DARKTABLE es el directorio de instalación de darktable y$HOME es su directorio de inicio).
Esta es la única vez que darktable ejecutará scripts de Lua por sí mismo. Estos scripts pueden registrar devoluciones de llamada para realizar acciones en varios eventos de darktable. Este mecanismo de devolución de llamada es el método principal para desencadenar acciones de lua.</description>
    </item>
    
    <item>
      <title>un ejemplo simple en lua</title>
      <link>https://darktable-org.github.io/dtdocs/es/lua/a-simple-example/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darktable-org.github.io/dtdocs/es/lua/a-simple-example/</guid>
      <description>Empecemos con ejemplo simple que imprima algo en la terminal. Cree un archivo llamado luarc en el directorio de configuración de darktable (usualmente $HOME/.config/darktable/) y añada las siguientes líneas:
print(&amp;quot;Hello World !&amp;quot;) Ejecute darktable y verá la frase &amp;ldquo;Hello World !&amp;rdquo; impresa en la terminal. Nada estrafalario, pero es un comienzo.
En este punto, no hay nada específico de darktable en el script. Simplemente usamos la función de impresión estándar de Lua para imprimir una cadena.</description>
    </item>
    
    <item>
      <title>impresión de imágenes etiquetadas</title>
      <link>https://darktable-org.github.io/dtdocs/es/lua/printing-labeled-images/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darktable-org.github.io/dtdocs/es/lua/printing-labeled-images/</guid>
      <description>El primer ejemplo nos mostró los conceptos básicos de lua y nos permitió comprobar que todo funcionaba correctamente. Ahora hagamos algo un poco más complejo. Intentemos imprimir una lista de imágenes que tengan una etiqueta &amp;ldquo;roja&amp;rdquo; adjunta. Pero antes que nada, ¿qué es una imagen?
local darktable = require &amp;quot;darktable&amp;quot; local debug = require &amp;quot;darktable.debug&amp;quot; print(darktable.debug.dump(darktable.database[1])) Ejecutar el código anterior producirá una gran cantidad de resultados. Lo veremos en un momento, pero primero veamos el código en sí.</description>
    </item>
    
    <item>
      <title>agregando un atajo simple</title>
      <link>https://darktable-org.github.io/dtdocs/es/lua/simple-shortcut/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darktable-org.github.io/dtdocs/es/lua/simple-shortcut/</guid>
      <description>Hasta ahora, todos nuestros script se ejecutan al inicio. La utilidad de esto es limitada y no nos permite reaccionar a las acciones de los usuarios. Para hacer cosas más avanzadas, necesitamos registrar una función que será llamada en un evento dado. Los eventos más típicos a los que reaccionar son los atajos de teclado.
darktable = require &amp;quot;darktable&amp;quot; local function hello_shortcut(event, shortcut) darktable.print(&amp;quot;Hello, I just received &#39;&amp;quot;..event.. &amp;quot;&#39; with parameter &#39;&amp;quot;.</description>
    </item>
    
    <item>
      <title>exportar imágenes con lua</title>
      <link>https://darktable-org.github.io/dtdocs/es/lua/exporting-images/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darktable-org.github.io/dtdocs/es/lua/exporting-images/</guid>
      <description>Hasta ahora hemos aprendido a usar lua para adaptar darktable a nuestro flujo de trabajo particular. Veamos ahora cómo usar lua para exportar imágenes fácilmente a un servicio en línea. Si puede cargar una imagen en un servicio a través de la línea de comando, puede usar lua para integrar esto en la interfaz de usuario de darktable.
En el siguiente ejemplo usaremos lua para exportar vía scp. Aparecerá un nuevo tipo de almacenamiento en la interfaz de usuario de darktable que exportará imágenes a un objetivo remoto a través del mecanismo de copia en ssh.</description>
    </item>
    
    <item>
      <title>construyendo elementos de interfaz de usuario</title>
      <link>https://darktable-org.github.io/dtdocs/es/lua/building-ui-elements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darktable-org.github.io/dtdocs/es/lua/building-ui-elements/</guid>
      <description>Nuestro ejemplo anterior fue un poco limitado. En particular, el uso de una preferencia por la ruta de exportación no fue muy agradable. Podemos hacerlo mejor agregando elementos a la interfaz de usuario en el cuadro de diálogo de exportación.
Los elementos de la interfaz de usuario se crean mediante la función darktable_new_widget. Esta función toma un tipo de widget como parámetro y devuelve un nuevo objeto correspondiente a ese widget.</description>
    </item>
    
    <item>
      <title>compartir scripts</title>
      <link>https://darktable-org.github.io/dtdocs/es/lua/sharing-scripts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darktable-org.github.io/dtdocs/es/lua/sharing-scripts/</guid>
      <description>Hasta ahora, todo nuestro código lua ha estado en luarc. Esa es una buena forma de desarrollar su guión, pero no es muy práctica para la distribución. Necesitamos convertir esto en un módulo lua adecuado. Para hacer eso, guardamos el código en un archivo separado (scp-storage.lua en este caso):
--[[ SCP STORAGE a simple storage to export images via scp AUTHOR Jérémy Rosen (jeremy.rosen@enst-bretagne.fr) INSTALLATION * copy this file in $CONFIGDIR/lua/ where CONFIGDIR is your darktable configuration directory * add the following line in the file $CONFIGDIR/luarc require &amp;quot;scp-storage&amp;quot; USAGE * select &amp;quot;Export via SCP&amp;quot; in the storage selection menu * set the target directory * export your images LICENSE GPLv2 ]] darktable = require &amp;quot;darktable&amp;quot; darktable.</description>
    </item>
    
    <item>
      <title>llamando a lua desde dbus</title>
      <link>https://darktable-org.github.io/dtdocs/es/lua/calling-from-dbus/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darktable-org.github.io/dtdocs/es/lua/calling-from-dbus/</guid>
      <description>Es posible enviar un comando lua a darktable a través de su interfaz DBus. El método org.darktable.service.Remote.Lua toma un solo parámetro de cadena que se interpreta como un comando lua. El comando se ejecutará en el contexto lua actual y debería devolver nil o una cadena. El resultado se devolverá como resultado del método DBus.
Si la llamada a Lua da como resultado un error, la llamada al método DBus devolverá un error org.</description>
    </item>
    
    <item>
      <title>usando darktable desde un script lua</title>
      <link>https://darktable-org.github.io/dtdocs/es/lua/darktable-from-lua/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darktable-org.github.io/dtdocs/es/lua/darktable-from-lua/</guid>
      <description>Advertencia: esta función es muy experimental. Se sabe que varios elementos aún no funcionan en modo biblioteca. Se recomienda realizar pruebas minuciosas.
La interfaz lua le permite usar darktable desde cualquier script lua. Esto cargará darktable como una biblioteca y le proporcionará la mayor parte de la API lua (darktable está configurado sin cabeza, por lo que las funciones relacionadas con la interfaz de usuario no están disponibles).
Como ejemplo, el siguiente programa imprimirá la lista de todas las imágenes de su biblioteca:</description>
    </item>
    
    <item>
      <title>API lua</title>
      <link>https://darktable-org.github.io/dtdocs/es/lua/api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://darktable-org.github.io/dtdocs/es/lua/api/</guid>
      <description>La API de Lua de darktable está documentada en su propio manual con una descripción detallada de todas las estructuras y funciones de datos. Puede descargar el manual de la API desde aquí.</description>
    </item>
    
  </channel>
</rss>
